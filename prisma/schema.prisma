generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String         @id @default(cuid())
  name          String
  email         String         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  documents     Document[]
  messages      Message[]
  collaborators Collaborator[]
}

model Document {
  url           String         @unique
  id            String         @id @default(cuid())
  title         String
  owner         User           @relation(fields: [ownerId], references: [id])
  highlights    Highlight[]
  collaborators Collaborator[]
  ownerId       String
  note          String?        @db.Text
  messages      Message[]
  isVectorised  Boolean        @default(false)

  // lastscrolledposition => but has to be different for each user 
  // create new table storing lastscrolledposition, 
  // along with userPreferences table which can be optional, if it exists, then it overrides users default(the one linked to user table) preferences (less priority)

  // pdf first page url => cloudinary provides this.
}

enum CollaboratorRole {
  EDITOR
  VIEWER
}

model Collaborator {
  id         String           @id @default(cuid())
  role       CollaboratorRole
  document   Document         @relation(fields: [documentId], references: [id])
  documentId String
  userId     String
  user       User             @relation(fields: [userId], references: [id])
}

model Message {
  id            String   @id @default(cuid())
  text          String
  createdAt     DateTime @default(now())
  user          User?    @relation(fields: [userId], references: [id])
  userId        String?
  document      Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId    String
  isUserMessage Boolean
}

model Highlight {
  id         String   @id @default(cuid())
  imageUrl   String?  @db.Text
  text       String?  @db.Text
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId String

  boundingRectangle Cordinate? @relation("boundingRectangle")

  rectangles Cordinate[] @relation("rectangles")

  pageNumber Int?
}

model Cordinate {
  id     String @id @default(cuid())
  x1     Float
  y1     Float
  x2     Float
  y2     Float
  width  Float
  height Float

  pageNumber Int?

  highlightedRectangle   Highlight? @relation("rectangles", fields: [highlightedRectangleId], references: [id], onDelete: Cascade)
  highlightedRectangleId String?

  highlightedBoundingRectangle   Highlight? @relation("boundingRectangle", fields: [highlightedBoundingRectangleId], references: [id], onDelete: Cascade)
  highlightedBoundingRectangleId String?    @unique
}
